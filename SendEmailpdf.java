import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.util.Date;

public class SendEmailpdf {

    public static void convertTextToPDF(String txtFilePath, String pdfFilePath) throws Exception {
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, new FileOutputStream(pdfFilePath));
        document.open();
        
        document.setMargins(50, 50, 50, 50);
        
        Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, BaseColor.DARK_GRAY);
        Paragraph title = new Paragraph("Movie Ticket Reservation System", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(20);
        document.add(title);
        
        LineSeparator separator1 = new LineSeparator();
        separator1.setLineColor(BaseColor.DARK_GRAY);
        document.add(new Chunk(separator1));
        document.add(new Paragraph("\n"));
        
        Font infoFont = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, BaseColor.GRAY);
        Paragraph dateTime = new Paragraph("Generated on: " + 
            new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()) + " UTC", infoFont);
        Paragraph userInfo = new Paragraph("Generated by: NipunSGeeTH", infoFont);
        dateTime.setAlignment(Element.ALIGN_RIGHT);
        userInfo.setAlignment(Element.ALIGN_RIGHT);
        document.add(dateTime);
        document.add(userInfo);
        document.add(new Paragraph("\n"));
        
        Font contentFont = FontFactory.getFont(FontFactory.COURIER, 12, BaseColor.BLACK);
        BufferedReader br = new BufferedReader(new FileReader(txtFilePath));
        String textLine;
        
        while ((textLine = br.readLine()) != null) {
            if (textLine.startsWith("Movie:") || textLine.startsWith("Date:") || 
                textLine.startsWith("Showtime:") || textLine.startsWith("Tickets:") || 
                textLine.startsWith("Total Cost:")) {
                String[] parts = textLine.split(":", 2);
                Phrase phrase = new Phrase();
                phrase.add(new Chunk(parts[0] + ":", FontFactory.getFont(FontFactory.COURIER_BOLD, 12, BaseColor.BLACK)));
                if (parts.length > 1) {
                    phrase.add(new Chunk(parts[1], contentFont));
                }
                document.add(new Paragraph(phrase));
            } else if (textLine.startsWith("----")) {
                LineSeparator separator2 = new LineSeparator();
                separator2.setLineColor(BaseColor.LIGHT_GRAY);
                separator2.setLineWidth(1);
                document.add(new Chunk(separator2));
            } else {
                Paragraph paragraph = new Paragraph(textLine, contentFont);
                document.add(paragraph);
            }
            document.add(new Paragraph(5f, " "));
        }
        
        br.close();
        document.close();
        System.out.println("PDF generated successfully: " + pdfFilePath);
    }
    
    public static String extractEmailFromBill(String txtFilePath) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(txtFilePath));
        String line, lastEmail = null;
        while ((line = br.readLine()) != null) {
            if (line.startsWith("Email:")) {
                lastEmail = line.split(":", 2)[1].trim();
            }
        }
        br.close();
        return lastEmail;
    }
    
    public static void sendEmailWithReport(String reportFilePath, String recipientEmail) throws Exception {
        final String username = "sangeethk.23@cse.mrt.ac.lk";
        final String password = "jkuz livs dfqm woba"; 

        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress(username));
        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
        message.setSubject("Super-Saving Revenue Report");

        MimeBodyPart textPart = new MimeBodyPart();
        textPart.setText("Please find the attached revenue report.");

        MimeBodyPart attachmentPart = new MimeBodyPart();
        attachmentPart.attachFile(new File(reportFilePath));

        Multipart multipart = new MimeMultipart();
        multipart.addBodyPart(textPart);
        multipart.addBodyPart(attachmentPart);

        message.setContent(multipart);
        Transport.send(message);
        System.out.println("Report sent via email to: " + recipientEmail);
    }

    public void main(String[] args) {
        try {
            String txtFilePath = "bill.txt";
            String pdfFilePath = "bill.pdf";

            convertTextToPDF(txtFilePath, pdfFilePath);
            String recipientEmail = extractEmailFromBill(txtFilePath);
            if (recipientEmail == null || recipientEmail.isEmpty()) {
                System.out.println("No email found in the bill!");
                return;
            }
            sendEmailWithReport(pdfFilePath, recipientEmail);
        } catch (Exception e) {
            System.out.println("Error generating or sending the revenue report.");
            e.printStackTrace();
        }
    }
}
